import PouchDB from 'pouchdb-browser';
import type { TodoDoc, NewTodo } from './types';

// Use a generic PouchDB type to avoid TS issues with _rev
// Crud methods ensure returned docs are fully typed
export const db = new PouchDB<any>('todos');

// --- Global change listener ---
let isListening = false;
const listeners: (() => void)[] = [];

export function watchChanges(callback: () => void) {
  listeners.push(callback);
  if (!isListening) {
    db.changes({ live: true, since: 'now', include_docs: true })
      .on('change', () => listeners.forEach(cb => cb()))
      .on('error', err => console.error('PouchDB changes error:', err));
    isListening = true;
  }
}

// --- CRUD operations ---

export async function getTodos(): Promise<TodoDoc[]> {
  const result = await db.allDocs({ include_docs: true });
  return result.rows
    .map(r => r.doc)
    .filter((doc): doc is TodoDoc => !!doc && !!doc._rev);
}

export async function addTodo(todo: NewTodo): Promise<TodoDoc> {
  const doc = { _id: new Date().toISOString(), ...todo };
  const res = await db.put(doc); // TS happy, _rev generated by PouchDB
  return { ...doc, _rev: res.rev };
}

export async function toggleTodo(todo: TodoDoc): Promise<TodoDoc> {
  const updated = { ...todo, completed: !todo.completed };
  const res = await db.put(updated);
  return { ...updated, _rev: res.rev };
}

export async function deleteTodo(todo: TodoDoc) {
  await db.remove(todo._id, todo._rev);
}
